import asyncio
import logging
import json
import time
from web3 import Web3
from telegram import Bot

# –õ–æ–≥–æ—Ç–∏–ø
def display_logo():
    logo = """
    \033[32m
    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    \033[0m
    –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª may.crypto{ü¶Ö}, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–¥ - https://t.me/maycrypto
    """
    print(logo)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å —ç–º–æ–¥–∑–∏
async def send_telegram_message(message):
    await bot.send_message(chat_id=CHAT_ID, text=message)

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–≤—É—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
TELEGRAM_TOKEN = input("–í–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω Telegram –ë–æ—Ç–∞: ")
CHAT_ID = input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Telegram ID: ")

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
private_key_1 = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ 1: ")
public_address_1 = input("–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ 1: ")

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
private_key_2 = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ 2: ")
public_address_2 = input("–í–≤–µ–¥–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ 2: ")

bet_amount = float(input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–≤ ETH): "))

# –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web3
w3 = Web3(Web3.HTTPProvider('https://arb1.arbitrum.io/rpc'))

if not w3.is_connected():
    asyncio.run(send_telegram_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ Arbitrum"))
    exit()

# –ó–∞–≥—Ä—É–∑–∫–∞ ABI –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
with open('ContractABI.json', 'r') as abi_file:
    abi_content = json.load(abi_file)
    if isinstance(abi_content, dict) and 'result' in abi_content:
        contract_abi = json.loads(abi_content['result'])
    else:
        contract_abi = abi_content

contract_address = Web3.to_checksum_address('0x1cdc19b13729f16c5284a0ace825f83fc9d799f4')
contract = w3.eth.contract(address=contract_address, abi=contract_abi)

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã –≤ Wei
bet_amount_wei = w3.to_wei(bet_amount, 'ether')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è nonce –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
nonce_1 = w3.eth.get_transaction_count(public_address_1, 'pending')
nonce_2 = w3.eth.get_transaction_count(public_address_2, 'pending')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —ç–ø–æ—Ö–∏
def get_current_epoch():
    return contract.functions.currentEpoch().call()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–∞ –ª–∏ —Å–¥–µ–ª–∞–Ω–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é —ç–ø–æ—Ö—É
def has_bet(epoch, public_address):
    try:
        return contract.functions.ledger(epoch, public_address).call()[1] > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç–ø–æ—Ö–∏ {epoch}: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Ä–æ—Å—Ç (bull) –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ 1
async def bet_bull(epoch):
    global nonce_1
    base_fee = w3.eth.get_block('latest')['baseFeePerGas']
    max_priority_fee = w3.to_wei('2', 'gwei')
    max_fee_per_gas = base_fee + max_priority_fee
    gas_limit = 160860
    
    txn = contract.functions.betBull(epoch).build_transaction({
        'chainId': 42161,
        'gas': gas_limit,
        'maxFeePerGas': max_fee_per_gas,
        'maxPriorityFeePerGas': max_priority_fee,
        'nonce': nonce_1,
        'value': bet_amount_wei
    })
    
    signed_txn = w3.eth.account.sign_transaction(txn, private_key_1)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
    nonce_1 += 1
    
    await send_telegram_message(f"‚úÖ –°—Ç–∞–≤–∫–∞ –Ω–∞ —Ä–æ—Å—Ç (–∫–æ—à–µ–ª–µ–∫ 1) —Å–¥–µ–ª–∞–Ω–∞. üöÄ\n–≠–ø–æ—Ö–∞: {epoch}\n–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_hash.hex()}\n–°—É–º–º–∞: {bet_amount} ETH")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ (bear) –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ 2
async def bet_bear(epoch):
    global nonce_2
    base_fee = w3.eth.get_block('latest')['baseFeePerGas']
    max_priority_fee = w3.to_wei('2', 'gwei')
    max_fee_per_gas = base_fee + max_priority_fee
    gas_limit = 160860
    
    txn = contract.functions.betBear(epoch).build_transaction({
        'chainId': 42161,
        'gas': gas_limit,
        'maxFeePerGas': max_fee_per_gas,
        'maxPriorityFeePerGas': max_priority_fee,
        'nonce': nonce_2,
        'value': bet_amount_wei
    })
    
    signed_txn = w3.eth.account.sign_transaction(txn, private_key_2)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
    nonce_2 += 1
    
    await send_telegram_message(f"‚úÖ –°—Ç–∞–≤–∫–∞ –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ (–∫–æ—à–µ–ª–µ–∫ 2) —Å–¥–µ–ª–∞–Ω–∞. üêª\n–≠–ø–æ—Ö–∞: {epoch}\n–•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {tx_hash.hex()}\n–°—É–º–º–∞: {bet_amount} ETH")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é 10 –º–∏–Ω—É—Ç
async def main():
    # –ü–æ–∫–∞–∑ –ª–æ–≥–æ—Ç–∏–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    display_logo()

    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
    await send_telegram_message("ü§ñ –°–∫—Ä–∏–ø—Ç —Å—Ç–∞–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.\nüïí –î–≤–∞ –∫–æ—à–µ–ª—å–∫–∞ –±—É–¥—É—Ç –¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç.")

    while True:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —ç–ø–æ—Ö—É
        current_epoch = get_current_epoch()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞ –≤ —ç—Ç–æ–π —ç–ø–æ—Ö–µ
        if not has_bet(current_epoch, public_address_1):
            await bet_bull(current_epoch)

        if not has_bet(current_epoch, public_address_2):
            await bet_bear(current_epoch)

        await send_telegram_message("üí∏ –°—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–¥–µ–ª–∞–Ω—ã —Å –æ–±–æ–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.")

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∑–∞ 2 –º–∏–Ω—É—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–≤–∫–∏
        await asyncio.sleep(480)  # 480 —Å–µ–∫—É–Ω–¥ = 8 –º–∏–Ω—É—Ç
        await send_telegram_message("‚è≥ –ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –Ω–∞—á–Ω–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–≤–∫–∞...")
        
        # –ñ–¥–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 2 –º–∏–Ω—É—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        await asyncio.sleep(120)  # 120 —Å–µ–∫—É–Ω–¥ = 2 –º–∏–Ω—É—Ç—ã

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
asyncio.run(main())
